{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/macbook/3-1/RN-WeatherApp/Detail.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport moment from 'moment';\nimport Show from \"./show\";\nimport Clear from \"./weatherIcon/Clear.png\";\n\nvar DetailScreen = function (_Component) {\n  _inherits(DetailScreen, _Component);\n\n  var _super = _createSuper(DetailScreen);\n\n  function DetailScreen(props) {\n    var _this;\n\n    _classCallCheck(this, DetailScreen);\n\n    _this = _super.call(this, props);\n\n    var moment = require('moment');\n\n    _this.state = {\n      weatherData: []\n    };\n    return _this;\n  }\n\n  _createClass(DetailScreen, [{\n    key: \"componentMount\",\n    value: function componentMount() {\n      var _this2 = this;\n\n      return fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\" + this.props.route.params.text + \"&appid=e5ea91bc97a4a071bfb4d4d27fe05ae1\").then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        console.log(responseJson);\n\n        _this2.setState({\n          weatherData: [].concat(responseJson.list[0], responseJson.list[1], responseJson.list[2], responseJson.list[3], responseJson.list[4], responseJson.list[5]),\n          test: true\n        });\n\n        console.log(_this2.state);\n      }).catch(function (error) {\n        _this2.ErrorView();\n\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"ErrorView\",\n    value: function ErrorView() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 30\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 30\n        }\n      }, \"City not found\"));\n    }\n  }, {\n    key: \"WeatherMainImage\",\n    value: function WeatherMainImage(_ref) {\n      var weather = _ref.weather;\n\n      if (weather == 'Clouds') {\n        return React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }\n        }, \"\\uAD6C\\uB984\\uAD6C\\uB984\");\n      } else {\n        return React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }\n        }, React.createElement(\"img\", {\n          src: Clear,\n          width: \"50\",\n          height: \"50\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"Weather\",\n    value: function Weather(_ref2) {\n      var item = _ref2.item;\n      console.log(item.weather[0].main);\n      return React.createElement(this.WeatherMainImage, {\n        item: item.weather[0].main,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.state.test) this.componentMount();\n\n      if (!this.state.test) {\n        return React.createElement(this.WeatherMainImage, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 40\n          }\n        });\n      } else {\n        console.log(this.state.weatherData);\n        return React.createElement(SafeAreaView, {\n          style: styles.fullscreen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 20\n          }\n        }, React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 30\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 30\n          }\n        }, \"How is the Weather today\"), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 30\n          }\n        }, \"\\uAC80\\uC0C9\\uD55C \\uB3C4\\uC2DC\"), React.createElement(Text, {\n          style: {\n            fontSize: 30,\n            backgroundColor: '#aaaaaa',\n            borderRadius: 5,\n            padding: 5,\n            margin: 5\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 30\n          }\n        }, this.props.route.params.text), React.createElement(StatusBar, {\n          style: \"auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }\n        })), React.createElement(ScrollView, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }\n        }, this.state.weatherData.map(function (item, index) {\n          return React.createElement(_this3.Weather, {\n            key: index,\n            item: item,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }\n          });\n        })));\n      }\n    }\n  }]);\n\n  return DetailScreen;\n}(Component);\n\nexport { DetailScreen as default };\nvar styles = StyleSheet.create({\n  fullscreen: {\n    flex: 1\n  },\n  weatherbox: {\n    width: 400,\n    height: 100,\n    flex: 1,\n    padding: 5,\n    borderWidth: 1,\n    borderRadius: 3,\n    lineHeight: 30\n  },\n  Search: {\n    backgroundColor: 'black',\n    alignItems: 'left',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/macbook/3-1/RN-WeatherApp/Detail.js"],"names":["React","Component","moment","Show","Clear","DetailScreen","props","require","state","weatherData","fetch","route","params","text","then","response","json","responseJson","console","log","setState","concat","list","test","catch","error","ErrorView","fontSize","weather","item","main","componentMount","styles","fullscreen","backgroundColor","borderRadius","padding","margin","map","index","StyleSheet","create","flex","weatherbox","width","height","borderWidth","lineHeight","Search","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {FlatList,SafeAreaView, StatusBar, ScrollView, Button,View, Text, StyleSheet } from 'react-native';\nimport moment from 'moment';\nimport Show from './show';\nimport Clear from './weatherIcon/Clear.png'\n\n\nexport default class DetailScreen extends Component {\n    constructor(props){\n        super(props);\n        const moment = require('moment');\n\n        this.state = {\n            weatherData : [], // Test\n\n        }\n    }\n\n    componentMount(){\n        return fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+ this.props.route.params.text+\"&appid=e5ea91bc97a4a071bfb4d4d27fe05ae1\")\n        .then( (response) => response.json() )\n        .then( (responseJson) => {\n        console.log(responseJson)\n            this.setState({\n                  weatherData : [].concat(responseJson.list[0],responseJson.list[1],responseJson.list[2],responseJson.list[3],responseJson.list[4],responseJson.list[5]),\n                test : true, // 호출이 되면 true로\n            });\n            console.log(this.state); // 테스트용 출력\n        })\n        .catch((error) => {\n            this.ErrorView()\n            console.log(error)\n        });\n    }\n\n    ErrorView(){\n        return(\n                        <View>\n                             <Text style={{fontSize:30}}>City not found</Text>\n                        </View>\n        );\n    }\n\n\n    WeatherMainImage({weather}){\n        if (weather == 'Clouds'){\n            return(\n                <Text>구름구름</Text>\n            );\n        }\n        else{\n            return(\n                <div>\n                    <img src={Clear} width='50' height='50'/>\n                </div>\n            );\n        }\n\n    }\n    Weather({item}){   // 날씨별 이미지 , 기온 ( 최고, 최저 ) , 습도 까지만 일단 출력\n    console.log(item.weather[0].main)\n        return(\n                                <this.WeatherMainImage item={item.weather[0].main}/>\n\n        );\n    }\n    render(){\n        if(!this.state.test) this.componentMount()\n        if(!this.state.test) { return (<this.WeatherMainImage/>);}\n        else{ // 도시 검색 성공\n                                console.log(this.state.weatherData)\n\n                return(\n                   <SafeAreaView style = {styles.fullscreen}>\n                        <View>\n                             <Text style={{fontSize:30}}>How is the Weather today</Text>\n                             <Text>검색한 도시</Text>\n                             <Text style={{fontSize:30, backgroundColor: '#aaaaaa', borderRadius: 5, padding:5, margin:5}}>\n                             {this.props.route.params.text}\n                             </Text>\n                            <StatusBar style=\"auto\"/>\n                        </View>\n                        <ScrollView>\n                            {this.state.weatherData.map( (item,index) => // DATA 에 들어있는 컴포넌트 반복 실행\n                                <this.Weather key={index} item = {item}/> // Call Weather(item)\n                            )}\n\n                        </ScrollView>\n                   </SafeAreaView>\n\n                );\n        }\n\n    }\n\n}\n\nconst styles = StyleSheet.create({\n  fullscreen: {\n    flex: 1,\n  },\n  weatherbox: {\n    width:400,\n    height:100,\n    flex:1,\n    padding : 5,\n    borderWidth : 1,\n    borderRadius : 3,\n    lineHeight: 30,\n\n  },\n  Search:{\n    backgroundColor : 'black',\n    alignItems : 'left',\n    justifyContent : 'center'\n\n  },\n});\n"]},"metadata":{},"sourceType":"module"}